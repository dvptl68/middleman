import pandas as pd
import sys
import names
import numpy as np
from flask import Flask, jsonify, make_response, request
from flask_restful import Resource, Api, reqparse, abort
import ast
import json
from elasticsearch import Elasticsearch
from process import ProcessProfiles


# Password for the 'elastic' user generated by Elasticsearch and the fingerprint of the certificate
with open('data/keys.json', 'r') as f:
    keys = json.load(f)
    ELASTIC_PASSWORD = keys['ELASTIC_PASSWORD']
    CERT_FINGERPRINT = keys['CERT_FINGERPRINT']

# Create the es instance
es = Elasticsearch(
    "https://localhost:9200",
    ssl_assert_fingerprint=(CERT_FINGERPRINT),
    basic_auth=("elastic", ELASTIC_PASSWORD)
)

# api for generating random user from database (placeholder for now)
class User(Resource):
    
    def get(self):                
        es.indices.refresh(index="dating_profiles")
        resp = es.get(index="dating_profiles", id=np.random.choice(100))
        response = make_response(json.dumps(resp['_source']))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response
    # methods go here
    pass

# api for selecting a subset of n users given some parameters
class Users(Resource):
    
    def get(self,n, age, height, gender, orientation):                
        es.indices.refresh(index="dating_profiles")
        searchGender = ""
        if gender == 'm':
            if orientation == 'gay':
                searchGender = 'm'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'f'
        else:
            if orientation == 'gay':
                searchGender = 'f'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'm'
                
        gap = 3
        lowerAgeLimit = int(age) - gap
        upperAgeLimit = int(age) + gap
        lowerHeightLimit = int(height) - gap
        upperHeightLimit = int(height) + gap
        search_param = ""
        if searchGender is None:
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "should": [
                            {
                             "range":{
                        
                                    "age":{
                                        "gte": lowerAgeLimit,
                                        "lte": upperAgeLimit,
                                        "boost": 2.0
                                    }
                                        
                                }   
                            },
                            {
                             "range":{
                                    "age":{
                                        "gte": lowerAgeLimit - 3,
                                        "lte": upperAgeLimit + 3,
                                        "boost": 2.0
                                    }      
                                }   
                            },
                            {
                                
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            },
                            {
                                
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit - 3,
                                        "lte": upperHeightLimit + 3,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        else:
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "should": [
                            
                            {
                            "match": {
                                "orientation" : orientation
                            }
                            }
                        ],
                        "must": [
                            
                            {
                            "match" :{
                                "sex": searchGender
                            }
                            },
                            {
                                "range":{
                                        "age":{
                                            "gte": lowerAgeLimit,
                                            "lte": upperAgeLimit,
                                            "boost": 2.0
                                        }
                                }   
                            },
                            {
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }        
                }
            }
            
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        response = make_response(json.dumps(profiles))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response
    # methods go here
    pass
    
class Add(Resource):
    # methods go here
    pass

class GetUserDetails(Resource):
    def get(self, id):
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : id
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        response = make_response(json.dumps(profiles))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response

class LikedUser(Resource):
    def get(self, user1, user2):
        print("Hello World")
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "id" : user1
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        print(profiles[0]['liked_users'])
        lis = profiles[0]['liked_users']
        lis.append(user2)
        print('here')
        print(lis)
        body_update = {
            "doc": {
            "liked_users" : lis
            }
        } 
        response = es.update(index='dating_profiles', id=profiles[0]['id'], body=body_update)  
        print('response: ', response)

# mProfiles_post_args = reqparse.RequestParser()
# mProfiles_post_args.add_argument("user",type=str, help="Please specify username with \"field\" to add to mProfiles", required=True)

class MProfiles(Resource):
    def get(self, matchmaker): # matchmaker username
        print(matchmaker)
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmaker
                                } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        print(profiles[0]['mProfiles'])
        lis = profiles[0]['mProfiles']
        print('here')
        print(lis)
        return lis
        
    def post(self, matchmaker):
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmaker
                                } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        print(profiles[0]['mProfiles'])
        
        mProfiles = profiles[0]['mProfiles']
        approvedProfiles = profiles[0]['approvedProfiles']
        # post args 
        # request.get_json(force=True)
        args = request.get_json(force=True)
        if 'liked' not in args:
            return "Please specify a \"liked\" key with \"y\" or \"n\" value in your json post object"
        
        print(args)
        print(args['user'])
        print(args["liked"])
        if args['user'] in mProfiles:
            mProfiles.remove(args['user'])
        if args['liked'] == 'y':
            approvedProfiles.append('user')
        print(mProfiles)
        print(approvedProfiles)
        # return lis
        body_update = {
            "doc": {
            "mProfiles" : mProfiles,
            "approvedProfiles" : approvedProfiles
            }
        } 
        response = es.update(index='dating_profiles', id=profiles[0]['id'], body=body_update)  
        print('response: ', response)
        return approvedProfiles
    
    

app = Flask(__name__)
api = Api(app)

api.add_resource(User, '/get_user/')  # '/users' is our entry point for Users
api.add_resource(Users, '/get_users/<n>/<age>/<height>/<gender>/<orientation>') 
api.add_resource(Add, '/add_user')  # adding users api
api.add_resource(GetUserDetails, '/get_user_detail/<username>/')
api.add_resource(LikedUser, '/like_user/<user1>/<user2>/')
api.add_resource(MProfiles, '/matchmaker_profiles/<matchmaker>/')
if __name__ == '__main__':
    app.run(debug=True)
