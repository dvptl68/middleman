import pandas as pd
import sys
import names
import numpy as np
from flask import Flask, jsonify, make_response, request, request
from flask_restful import Resource, Api, reqparse, abort
import ast
import json
from elasticsearch import Elasticsearch
from process import ProcessProfiles
from random import randint
from flask_cors import CORS

# Password for the 'elastic' user generated by Elasticsearch and the fingerprint of the certificate
with open('data/keys.json', 'r') as f:
    keys = json.load(f)
    ELASTIC_PASSWORD = keys['ELASTIC_PASSWORD']
    CERT_FINGERPRINT = keys['CERT_FINGERPRINT']

# Create the es instance
es = Elasticsearch(
    "https://localhost:9200",
    ssl_assert_fingerprint=(CERT_FINGERPRINT),
    basic_auth=("elastic", ELASTIC_PASSWORD)
)

# api for generating random user from database (placeholder for now)
class User(Resource):
    
    def get(self):                
        es.indices.refresh(index="dating_profiles")
        resp = es.get(index="dating_profiles", id=np.random.choice(100))
        response = make_response(json.dumps(resp['_source']))
        #response.headers["Access-Control-Allow-Origin"] = "*"
        return response
    # methods go here
    pass

# api for selecting a subset of n users given some parameters
class Users(Resource):
    
    def get(self,n, age, height, gender, orientation):                
        es.indices.refresh(index="dating_profiles")
        searchGender = ""
        if gender == 'm':
            if orientation == 'gay':
                searchGender = 'm'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'f'
        else:
            if orientation == 'gay':
                searchGender = 'f'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'm'
                
        gap = 20
        lowerAgeLimit = int(age) - gap
        upperAgeLimit = int(age) + gap
        lowerHeightLimit = int(height) - gap
        upperHeightLimit = int(height) + gap
        search_param = ""
        if searchGender is None:
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "should": [
                            {
                             "range":{
                        
                                    "age":{
                                        "gte": lowerAgeLimit,
                                        "lte": upperAgeLimit,
                                        "boost": 2.0
                                    }
                                        
                                }   
                            },
                            {
                             "range":{
                                    "age":{
                                        "gte": lowerAgeLimit - 3,
                                        "lte": upperAgeLimit + 3,
                                        "boost": 2.0
                                    }      
                                }   
                            },
                            {
                                
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            },
                            {
                                
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit - 3,
                                        "lte": upperHeightLimit + 3,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        else:
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "should": [
                            
                            {
                            "match": {
                                "orientation" : orientation
                            }
                            }
                        ],
                        "must": [
                            
                            {
                            "match" :{
                                "sex": searchGender
                            }
                            },
                            {
                                "range":{
                                        "age":{
                                            "gte": lowerAgeLimit,
                                            "lte": upperAgeLimit,
                                            "boost": 2.0
                                        }
                                }   
                            },
                            {
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }        
                }
            }
            
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        response = make_response(json.dumps(profiles))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response
    # methods go here
    pass

class Add(Resource):
    # methods go here
    pass

class GetUserDetails(Resource):
    def get(self, username):
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : username
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        response = make_response(json.dumps(profiles))
        return response

class SignUp(Resource):

    def post(self, username, age, height, sex, orientation, income, religion, name, location, education):
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : username
                            } 
                            }   

                        ]
                    }
                }
            }
        data = [{
        'username': username,
        'age': age,
        'height': height,
        'sex': sex,
        'orientation': orientation,
        'income':income,
        'religion':religion,
        'name':name,
        'location':location,
        'education':education
        }]
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        if profiles == []:
            res = es.index(index='dating_profiles', doc_type="_doc", id=randint(10**(6-1), (10**6)-1), body=data[0])

class LikedUser(Resource):
    def post(self):
        record = json.loads(request.data)
        for r in record:
            if r == 'userA':
                userA = record[r]
            elif r == 'userB':
                userB = record[r]

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userA
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])

        users_liked = profiles[0]['usersLiked']
        users_liked.append(userB)

        body_update = {
            "doc": {
            "usersLiked" : users_liked
            }
        } 
        response = es.update(index='dating_profiles', id=profiles[0]['id'], body=body_update)

class DisLikeUser(Resource):
    def post(self):
        record = json.loads(request.data)
        for r in record:
            if r == 'userA':
                userA = record[r]
            elif r == 'userB':
                userB = record[r]

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userA
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profileA = ProcessProfiles.get_source_list(resp['hits']['hits'])
        userALiked = profileA[0]['usersLiked']
        matchmakerA = profileA[0]['matchmaker']

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmakerA
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profileMatchA = ProcessProfiles.get_source_list(resp['hits']['hits'])
        matchmaker_A_approved = profileMatchA[0]['approvedProfiles']
        if userB in matchmaker_A_approved:
            matchmaker_A_approved.remove(userB)

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userB
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profileB = ProcessProfiles.get_source_list(resp['hits']['hits'])
        userBLiked = profileB[0]['usersLiked']
        matchmakerB = profileB[0]['matchmaker']

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmakerB
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profileMatchB = ProcessProfiles.get_source_list(resp['hits']['hits'])
        matchmaker_B_approved = profileMatchB[0]['approvedProfiles']
        if userA in matchmaker_B_approved:
            matchmaker_B_approved.remove(userA)

        if userA in userBLiked:
            userBLiked.remove(userA)

        if userB in userALiked:
            userALiked.remove(userB)

        body_m_a_update = {
            "doc": {
            "approvedProfiles" : matchmaker_A_approved
            }
        } 

        body_m_b_update = {
            "doc": {
            "approvedProfiles" : matchmaker_B_approved
            }
        }

        body_a_update = {
            "doc": {
            "usersLiked" : userALiked
            }
        }

        body_b_update = {
            "doc": {
            "usersLiked" : userBLiked
            }
        }
        response = es.update(index='dating_profiles', id=profileA[0]['id'], body=body_a_update)

        response = es.update(index='dating_profiles', id=profileB[0]['id'], body=body_b_update)

        response = es.update(index='dating_profiles', id=profileMatchA[0]['id'], body=body_m_a_update)

        response = es.update(index='dating_profiles', id=profileMatchB[0]['id'], body=body_m_b_update)
      
class DiscoverTab(Resource):
    def get(self, userAusername):
        list_profiles = []
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userAusername
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        matchmaker = profiles[0]['matchmaker']
        liked_users = profiles[0]['usersLiked']
        print(matchmaker)

        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmaker
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        prof = ProcessProfiles.get_source_list(resp['hits']['hits'])
        usersCheck = prof[0]['approvedProfiles']
        for user in usersCheck:
            print(user)
            es.indices.refresh(index="dating_profiles")
            search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : user
                            } 
                            }   

                        ]
                    }
                }
            }
            resp = es.search(index="dating_profiles", body=search_param)
            profile = ProcessProfiles.get_source_list(resp['hits']['hits'])
            userBMatchmaker = profile[0]['matchmaker']

            es.indices.refresh(index="dating_profiles")
            search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userBMatchmaker
                            } 
                            }   

                        ]
                    }
                }
            }
            resp = es.search(index="dating_profiles", body=search_param)
            profile = ProcessProfiles.get_source_list(resp['hits']['hits'])
            check = profile[0]['approvedProfiles']
            if (userAusername in check) and (user not in liked_users):
                list_profiles.append(user)

        response = make_response(json.dumps(list_profiles))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response

class GetChatUsers(Resource):
    def get(self, userA):
        chat_profiles = []
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : userA
                            } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profileA = ProcessProfiles.get_source_list(resp['hits']['hits'])
        likedAprofiles = profileA[0]['usersLiked']
        
        for user in likedAprofiles:
            es.indices.refresh(index="dating_profiles")
            search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : user
                            } 
                            }   

                        ]
                    }
                }
            }
            resp = es.search(index="dating_profiles", body=search_param)
            profileB = ProcessProfiles.get_source_list(resp['hits']['hits'])
            likedBprofiles = profileB[0]['usersLiked']
            if userA in likedBprofiles:
                chat_profiles.append(user)
                
        response = make_response(json.dumps(chat_profiles))
        response.headers["Access-Control-Allow-Origin"] = "*"
        return response

# mProfiles_post_args = reqparse.RequestParser()
# mProfiles_post_args.add_argument("user",type=str, help="Please specify username with \"field\" to add to mProfiles", required=True)

class MProfiles(Resource):
    def get(self, matchmaker): # matchmaker username
        print(matchmaker)
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmaker
                                } 
                            }   

                        ]
                    }
                }
            }
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        print(profiles[0]['mProfiles'])
        lis = profiles[0]['mProfiles']
        print('here')
        print(lis)
        return lis
        
    def post(self, matchmaker):
        es.indices.refresh(index="dating_profiles")
        search_param = {
                "size": 1,
                "query": {
                    "bool": {
                        "should": [
                            {  
                                "match": {
                                "username" : matchmaker
                                } 
                            }   

                        ]
                    }
                }
            }
        
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        print(profiles[0]['mProfiles'])
        
        mProfiles = profiles[0]['mProfiles']
        approvedProfiles = profiles[0]['approvedProfiles']
        # post args 
        # request.get_json(force=True)
        args = request.get_json(force=True)
        if 'liked' not in args:
            return "Please specify a \"liked\" key with \"y\" or \"n\" value in your json post object"
        
        print(args)
        print(args['user'])
        print(args["liked"])
        if args['user'] in mProfiles:
            mProfiles.remove(args['user'])
        if args['liked'] == 'y':
            approvedProfiles.append(args['user'])
        print(mProfiles)
        print(approvedProfiles)
        # return lis
        body_update = {
            "doc": {
            "mProfiles" : mProfiles,
            "approvedProfiles" : approvedProfiles
            }
        } 
        response = es.update(index='dating_profiles', id=profiles[0]['id'], body=body_update)  
        print('response: ', response)
        return approvedProfiles

app = Flask(__name__)
api = Api(app)
CORS(app)

api.add_resource(User, '/get_user/')  # '/users' is our entry point for Users
api.add_resource(Users, '/get_users/<n>/<age>/<height>/<gender>/<orientation>') 
api.add_resource(Add, '/add_user')  # adding users api
api.add_resource(GetUserDetails, '/get_user_detail/<username>/')
# New API endpoints
api.add_resource(LikedUser, '/like_user/')
api.add_resource(DisLikeUser, '/dis_like_user/')
api.add_resource(DiscoverTab, '/discover_tab/<userAusername>')
api.add_resource(GetChatUsers, '/chat_users/<userA>/')
api.add_resource(MProfiles, '/matchmaker_profiles/<matchmaker>/')
if __name__ == '__main__':
    app.run(debug=True)
