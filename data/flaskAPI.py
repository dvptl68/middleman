import pandas as pd
import sys
import names
import numpy as np
from flask import Flask, jsonify, make_response
from flask_restful import Resource, Api
import ast
import json
from elasticsearch import Elasticsearch
from process import ProcessProfiles


# Password for the 'elastic' user generated by Elasticsearch and the fingerprint of the certificate
with open('data/keys.json', 'r') as f:
    keys = json.load(f)
    ELASTIC_PASSWORD = keys['ELASTIC_PASSWORD']
    CERT_FINGERPRINT = keys['CERT_FINGERPRINT']

# Create the es instance
es = Elasticsearch(
    "https://localhost:9200",
    ssl_assert_fingerprint=(CERT_FINGERPRINT),
    basic_auth=("elastic", ELASTIC_PASSWORD)
)

# api for generating random user from database (placeholder for now)
class User(Resource):
    
    def get(self):                
        es.indices.refresh(index="dating_profiles")
        resp = es.get(index="dating_profiles", id=np.random.choice(100))
        return json.dumps(resp['_source'])
    # methods go here
    pass

# api for selecting a subset of n users given some parameters
class Users(Resource):
    
    def get(self,n, age, height, gender, orientation):                
        es.indices.refresh(index="dating_profiles")
        searchGender = ""
        if gender == 'm':
            if orientation == 'gay':
                searchGender = 'm'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'f'
        else:
            if orientation == 'gay':
                searchGender = 'f'
            elif orientation == 'bisexual':
                searchGender = None
            else:
                searchGender = 'm'
                
        gap = 3
        lowerAgeLimit = int(age) - gap
        upperAgeLimit = int(age) + gap
        lowerHeightLimit = int(height) - gap
        upperHeightLimit = int(height) + gap
        print(searchGender)
        search_param = ""
        if searchGender is None:
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "must": [
                            {
                             "range":{
                        
                                    "age":{
                                        "gte": lowerAgeLimit,
                                        "lte": upperAgeLimit,
                                        "boost": 2.0
                                    }
                                        
                                }   
                            },
                            {
                                
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        else:
            print("here")
            search_param = {
                "size": n,
                "query": {
                    "bool": {
                        "should": [
                            
                            {
                            "match": {
                                "orientation" : orientation
                            }
                            }
                        ],
                        "must": [
                            
                            {
                            "match" :{
                                "sex": searchGender
                            }
                            },
                            {
                                "range":{
                                        "age":{
                                            "gte": lowerAgeLimit,
                                            "lte": upperAgeLimit,
                                            "boost": 2.0
                                        }
                                }   
                            },
                            {
                                "range": {
                                    "height":{
                                        "gte": lowerHeightLimit,
                                        "lte": upperHeightLimit,
                                        "boost": 2.0
                                    }
                                }
                            }
                        ]
                    }        
                }
            }
            
        resp = es.search(index="dating_profiles", body=search_param)
        profiles = ProcessProfiles.get_source_list(resp['hits']['hits'])
        
        return json.dumps(profiles,indent=4)
    # methods go here
    pass
    
class Add(Resource):
    # methods go here
    pass

app = Flask(__name__)
api = Api(app)

api.add_resource(User, '/get_user/')  # '/users' is our entry point for Users
api.add_resource(Users, '/get_users/<n>/<age>/<height>/<gender>/<orientation>') 
api.add_resource(Add, '/add_user')  # adding users api
if __name__ == '__main__':
    app.run(debug=True)
